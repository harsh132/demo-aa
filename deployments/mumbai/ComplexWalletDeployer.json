{
  "address": "0x3f603B3Fe659D521C733a13c5F542e424292309F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_guardians",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "deployWallet",
      "outputs": [
        {
          "internalType": "contract ComplexWallet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_guardians",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "getDeploymentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7b509595c094fa79823acd1a21b9ebbff2bdbc800226e5b51919ac66a6ab455",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB8D8c43eCB6DE3031756d052e61e08472465B7be",
    "contractAddress": null,
    "transactionIndex": 26,
    "gasUsed": "3583312",
    "logsBloom": "0x
    "blockHash": "0x904b6af844c9137ba253f193db02def5304217c63c7dcc8985ea66cc81127151",
    "transactionHash": "0xb7b509595c094fa79823acd1a21b9ebbff2bdbc800226e5b51919ac66a6ab455",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 29471838,
        "transactionHash": "0xb7b509595c094fa79823acd1a21b9ebbff2bdbc800226e5b51919ac66a6ab455",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b8d8c43ecb6de3031756d052e61e08472465b7be",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000131881302a24700000000000000000000000000000000000000000000000008aac34519a46d4a40000000000000000000000000000000000000000000018031eade10b348d8a7a0000000000000000000000000000000000000000000000008a991bd06a1cb0340000000000000000000000000000000000000000000018031ec0f98c64b7aeea",
        "logIndex": 88,
        "blockHash": "0x904b6af844c9137ba253f193db02def5304217c63c7dcc8985ea66cc81127151"
      }
    ],
    "blockNumber": 29471838,
    "cumulativeGasUsed": "9296674",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "97ff463219b80647b90b397be5ed5a55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_guardians\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"deployWallet\",\"outputs\":[{\"internalType\":\"contract ComplexWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_guardians\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getDeploymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"a sampler deployer contract for SimpleWallet the \\\"initCode\\\" for a wallet hold its address and a method call (deployWallet) with parameters, not actual constructor code.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ComplexWalletDeployer.sol\":\"ComplexWalletDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\n * specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    /**\\n     * return the account nonce.\\n     * subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)\\n     */\\n    function nonce() public view virtual returns (uint256);\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)\\n    external override virtual returns (uint256 deadline) {\\n        _requireFromEntryPoint();\\n        deadline = _validateSignature(userOp, userOpHash, aggregator);\\n        if (userOp.initCode.length == 0) {\\n            _validateAndUpdateNonce(userOp);\\n        }\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain-id)\\n     * @param aggregator the current aggregator. can be ignored by accounts that don't use aggregators\\n     * @return deadline the last block timestamp this operation is valid, or zero if it is valid indefinitely.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash, address aggregator)\\n    internal virtual returns (uint256 deadline);\\n\\n    /**\\n     * validate the current nonce matches the UserOperation nonce.\\n     * then it should update the account's state to prevent replay of this UserOperation.\\n     * called only if initCode is empty (since \\\"nonce\\\" field is used as \\\"salt\\\" on account creation)\\n     * @param userOp the op to validate.\\n     */\\n    function _validateAndUpdateNonce(UserOperation calldata userOp) internal virtual;\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n\\n    /**\\n     * expose an api to modify the entryPoint.\\n     * must be called by current \\\"admin\\\" of the account.\\n     * @param newEntryPoint the new entrypoint to trust.\\n     */\\n    function updateEntryPoint(address newEntryPoint) external {\\n        _requireFromAdmin();\\n        _updateEntryPoint(newEntryPoint);\\n    }\\n\\n    /**\\n     * ensure the caller is allowed \\\"admin\\\" operations (such as changing the entryPoint)\\n     * default implementation trust the account itself (or any signer that passes \\\"validateUserOp\\\")\\n     * to be the \\\"admin\\\"\\n     */\\n    function _requireFromAdmin() internal view virtual {\\n        require(msg.sender == address(this) || msg.sender == address(entryPoint()), \\\"not admin\\\");\\n    }\\n\\n    /**\\n     * update the current entrypoint.\\n     * subclass should override and update current entrypoint\\n     */\\n    function _updateEntryPoint(address) internal virtual;\\n}\\n\",\"keccak256\":\"0x38d74e83f33678fef447b73ff9d1d8dcfd11f6789090ca430a5f53c8f302b2b9\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param aggregator the aggregator used to validate the signature. NULL for non-aggregated signature accounts.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return deadline the last block timestamp this operation is valid, or zero if it is valid indefinitely.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)\\n    external returns (uint256 deadline);\\n}\\n\",\"keccak256\":\"0x5c2ba1219a655380d04d0872ad8310c4143d88824b513465d054a1149671ab0e\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is called by EntryPoint.simulateUserOperation() if the account has an aggregator.\\n     * First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatesSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatesSignature);\\n}\\n\",\"keccak256\":\"0xf77c94bc51e3e95023f88e6dacb3fa162267a13e5f729cae32cbdc93d54cdc5a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request\\n     * @param actualGasCost - the total cost (in gas) of this request.\\n     * @param actualGasPrice - the actual gas price the sender agreed to pay.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, uint256 actualGasCost, uint256 actualGasPrice, bool success);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param paymaster - if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,\\n     *       this value will be zero (since it failed before accessing the paymaster)\\n     *  @param reason - revert reason\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, address paymaster, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an \\\"actualAggregator\\\" when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is SimulationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param deadline until what time this userOp is valid (the minimum value of account and paymaster's deadline)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error SimulationResult(uint256 preOpGas, uint256 prefund, uint256 deadline, PaymasterInfo paymasterInfo);\\n\\n    /**\\n     * returned paymaster info.\\n     * If the UserOperation contains a paymaster, these fields are filled with the paymaster's stake value and delay.\\n     * A bundler must verify these values are above the minimal required values, or else reject the UserOperation.\\n     */\\n    struct PaymasterInfo {\\n        uint256 paymasterStake;\\n        uint256 paymasterUnstakeDelay;\\n    }\\n\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param deadline until what time this userOp is valid (the minimum value of account and paymaster's deadline)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregationInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error SimulationResultWithAggregation(uint256 preOpGas, uint256 prefund, uint256 deadline, PaymasterInfo paymasterInfo, AggregationInfo aggregationInfo);\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregationInfo {\\n        address actualAggregator;\\n        uint256 aggregatorStake;\\n        uint256 aggregatorUnstakeDelay;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n}\\n\\n\",\"keccak256\":\"0xd6adb38faa6b621bfba5f174c67e827b6d4850baa9e6e31c1c6be953d76d044e\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 withdrawTime\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the account's deposit\\n     * @param staked true if this account is staked as a paymaster\\n     * @param stake actual amount of ether staked for this paymaster.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake. must be above the global unstakeDelaySec\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 2^15 eth\\n     *    64 bit for full timestamp\\n     *    32 bit allow 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint64 withdrawTime;\\n    }\\n\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0x8f92698ea8f3748cb1b571425d058f42877dc46430d51d4a35c58f57ac9682e0\",\"license\":\"GPL-3.0-only\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor\\n     * @param callData the method call to execute on this account.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter\\n     * @param paymasterAndData if set, this field hold the paymaster address and \\\"paymaster-specific-data\\\". the paymaster will pay for the transaction instead of the sender\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/miner might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        // copy directly the userOp from calldata up to (but not including) the signature.\\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\\n        // than referencing each field separately.\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x223214375bdcf5670f16cbe4697ce5eae0cd673760db92491ad37967fbb3a6d0\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/ComplexWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-inline-assembly */\\r\\n/* solhint-disable reason-string */\\r\\n\\r\\nimport '@account-abstraction/contracts/core/BaseAccount.sol';\\r\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\n/**\\r\\n * minimal account.\\r\\n *  this is sample minimal account.\\r\\n *  has execute, eth handling methods\\r\\n *  has a single signer that can send requests through the entryPoint.\\r\\n */\\r\\ncontract ComplexWallet is BaseAccount {\\r\\n  using ECDSA for bytes32;\\r\\n\\r\\n  //explicit sizes of nonce, to fit a single storage cell with \\\"owner\\\"\\r\\n  uint96 private _nonce;\\r\\n  // address public owner;\\r\\n\\r\\n  address[] public signers;\\r\\n  address[] public guardians;\\r\\n\\r\\n  mapping(address => bool) public isSigner;\\r\\n  mapping(address => bool) public isGuardian;\\r\\n\\r\\n  function nonce() public view virtual override returns (uint256) {\\r\\n    return _nonce;\\r\\n  }\\r\\n\\r\\n  function entryPoint() public view virtual override returns (IEntryPoint) {\\r\\n    return _entryPoint;\\r\\n  }\\r\\n\\r\\n  IEntryPoint private _entryPoint;\\r\\n\\r\\n  event EntryPointChanged(address indexed oldEntryPoint, address indexed newEntryPoint);\\r\\n\\r\\n  // solhint-disable-next-line no-empty-blocks\\r\\n  receive() external payable {}\\r\\n\\r\\n  constructor(IEntryPoint anEntryPoint, address[] memory _signers, address[] memory _guardians) {\\r\\n    _entryPoint = anEntryPoint;\\r\\n    signers = _signers;\\r\\n    guardians = _guardians;\\r\\n\\r\\n    for (uint i = 0; i < _signers.length; i++) {\\r\\n      isSigner[_signers[i]] = true;\\r\\n    }\\r\\n\\r\\n    for (uint i = 0; i < _guardians.length; i++) {\\r\\n      isGuardian[_guardians[i]] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    _onlyOwner();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyOwner() internal view {\\r\\n    //directly from EOA owner, or through the entryPoint (which gets redirected through execFromEntryPoint)\\r\\n    require(isSigner[msg.sender] || msg.sender == address(this), 'only owner');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * transfer eth value to a destination address\\r\\n   */\\r\\n  function transfer(address payable dest, uint256 amount) external onlyOwner {\\r\\n    dest.transfer(amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * execute a transaction (called directly from owner, not by entryPoint)\\r\\n   */\\r\\n  function exec(address dest, uint256 value, bytes calldata func) external onlyOwner {\\r\\n    _call(dest, value, func);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * execute a sequence of transaction\\r\\n   */\\r\\n  function execBatch(address[] calldata dest, bytes[] calldata func) external onlyOwner {\\r\\n    require(dest.length == func.length, 'wrong array lengths');\\r\\n    for (uint256 i = 0; i < dest.length; i++) {\\r\\n      _call(dest[i], 0, func[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * change entry-point:\\r\\n   * an account must have a method for replacing the entryPoint, in case the the entryPoint is\\r\\n   * upgraded to a newer version.\\r\\n   */\\r\\n  function _updateEntryPoint(address newEntryPoint) internal override {\\r\\n    emit EntryPointChanged(address(_entryPoint), newEntryPoint);\\r\\n    _entryPoint = IEntryPoint(payable(newEntryPoint));\\r\\n  }\\r\\n\\r\\n  function _requireFromAdmin() internal view override {\\r\\n    _onlyOwner();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * validate the userOp is correct.\\r\\n   * revert if it doesn't.\\r\\n   * - must only be called from the entryPoint.\\r\\n   * - make sure the signature is of our supported signer.\\r\\n   * - validate current nonce matches request nonce, and increment it.\\r\\n   * - pay prefund, in case current deposit is not enough\\r\\n   */\\r\\n  function _requireFromEntryPoint() internal view override {\\r\\n    require(msg.sender == address(entryPoint()), 'account: not from EntryPoint');\\r\\n  }\\r\\n\\r\\n  // called by entryPoint, only after validateUserOp succeeded.\\r\\n  function execFromEntryPoint(address dest, uint256 value, bytes calldata func) external {\\r\\n    _requireFromEntryPoint();\\r\\n    _call(dest, value, func);\\r\\n  }\\r\\n\\r\\n  /// implement template method of BaseAccount\\r\\n  function _validateAndUpdateNonce(UserOperation calldata userOp) internal override {\\r\\n    require(_nonce++ == userOp.nonce, 'account: invalid nonce');\\r\\n  }\\r\\n\\r\\n  /// implement template method of BaseAccount\\r\\n  function _validateSignature(\\r\\n    UserOperation calldata userOp,\\r\\n    bytes32 userOpHash,\\r\\n    address\\r\\n  ) internal virtual override returns (uint256 deadline) {\\r\\n    bytes32 hash = userOpHash.toEthSignedMessageHash();\\r\\n    //ignore signature mismatch of from==ZERO_ADDRESS (for eth_callUserOp validation purposes)\\r\\n    // solhint-disable-next-line avoid-tx-origin\\r\\n    address signer = hash.recover(userOp.signature);\\r\\n    require(isSigner[signer] || tx.origin == address(0), 'account: wrong signature');\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  function _call(address target, uint256 value, bytes memory data) internal {\\r\\n    (bool success, bytes memory result) = target.call{value: value}(data);\\r\\n    if (!success) {\\r\\n      assembly {\\r\\n        revert(add(result, 32), mload(result))\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * check current account deposit in the entryPoint\\r\\n   */\\r\\n  function getDeposit() public view returns (uint256) {\\r\\n    return entryPoint().balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * deposit more funds for this account in the entryPoint\\r\\n   */\\r\\n  function addDeposit() public payable {\\r\\n    (bool req, ) = address(entryPoint()).call{value: msg.value}('');\\r\\n    require(req);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * withdraw value from the account's deposit\\r\\n   * @param withdrawAddress target to send to\\r\\n   * @param amount to withdraw\\r\\n   */\\r\\n  function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\\r\\n    entryPoint().withdrawTo(withdrawAddress, amount);\\r\\n  }\\r\\n\\r\\n  function addGuardian(address _guardian) public onlyOwner {\\r\\n    require(!isGuardian[_guardian], 'This address is already a guardian');\\r\\n\\r\\n    guardians.push(_guardian);\\r\\n    isGuardian[_guardian] = true;\\r\\n  }\\r\\n\\r\\n  function removeGuardian(address _guardian) public onlyOwner {\\r\\n    require(isGuardian[_guardian], 'This address is not a guardian');\\r\\n\\r\\n    for (uint i = 0; i < guardians.length; i++) {\\r\\n      if (guardians[i] == _guardian) {\\r\\n        guardians[i] = guardians[guardians.length - 1];\\r\\n        guardians.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    isGuardian[_guardian] = false;\\r\\n  }\\r\\n\\r\\n  function addSigner(address _signer) public onlyOwner {\\r\\n    require(!isSigner[_signer], 'This address is already a signer');\\r\\n\\r\\n    signers.push(_signer);\\r\\n    isSigner[_signer] = true;\\r\\n  }\\r\\n\\r\\n  function removeSigner(address _signer) public onlyOwner {\\r\\n    // bytes32 hash = keccak256(abi.encodePacked(\\\"RS\\\", _signer, nonce()))\\r\\n    //     .toEthSignedMessageHash();\\r\\n\\r\\n    // require(hash.recover(_signature) == owner, \\\"account: wrong signature\\\");\\r\\n    require(isSigner[_signer], 'This address is not a signer');\\r\\n\\r\\n    for (uint i = 0; i < signers.length; i++) {\\r\\n      if (signers[i] == _signer) {\\r\\n        signers[i] = signers[signers.length - 1];\\r\\n        signers.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    isSigner[_signer] = false;\\r\\n  }\\r\\n\\r\\n  function recoverWallet(address _newSigner, bytes[] memory _signatures) public {\\r\\n    require(_signatures.length == guardians.length, 'Invalid signatures length');\\r\\n    bytes32 hash = keccak256(abi.encodePacked('RW', address(this), _newSigner, _nonce++)).toEthSignedMessageHash();\\r\\n\\r\\n    for (uint i = 0; i < _signatures.length; i++) {\\r\\n      require(hash.recover(_signatures[i]) == guardians[i], 'Invalid signatures');\\r\\n    }\\r\\n\\r\\n    signers.push(_newSigner);\\r\\n    isSigner[_newSigner] = true;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7acb75f95e7611edc85fbe52ac78cf5cf5de67c43f5682e4b4fd66c824fc1b7c\",\"license\":\"GPL-3.0\"},\"contracts/ComplexWalletDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport './ComplexWallet.sol';\\r\\n\\r\\n/**\\r\\n * a sampler deployer contract for SimpleWallet\\r\\n * the \\\"initCode\\\" for a wallet hold its address and a method call (deployWallet) with parameters, not actual constructor code.\\r\\n */\\r\\ncontract ComplexWalletDeployer {\\r\\n  function deployWallet(\\r\\n    IEntryPoint entryPoint,\\r\\n    address[] memory _signers,\\r\\n    address[] memory _guardians,\\r\\n    uint256 salt\\r\\n  ) public returns (ComplexWallet) {\\r\\n    return new ComplexWallet{salt: bytes32(salt)}(entryPoint, _signers, _guardians);\\r\\n  }\\r\\n\\r\\n  function getDeploymentAddress(\\r\\n    IEntryPoint entryPoint,\\r\\n    address[] memory _signers,\\r\\n    address[] memory _guardians,\\r\\n    uint256 salt\\r\\n  ) public view returns (address) {\\r\\n    address predictedAddress = address(\\r\\n      uint160(\\r\\n        uint256(\\r\\n          keccak256(\\r\\n            abi.encodePacked(\\r\\n              bytes1(0xff),\\r\\n              address(this),\\r\\n              salt,\\r\\n              keccak256(\\r\\n                abi.encodePacked(type(ComplexWallet).creationCode, abi.encode(entryPoint, _signers, _guardians))\\r\\n              )\\r\\n            )\\r\\n          )\\r\\n        )\\r\\n      )\\r\\n    );\\r\\n\\r\\n    return predictedAddress;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x91daf6d0f2f48c9083736470bd02c09d37a77d963c6d526f7e14b06c793ae12e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "a sampler deployer contract for SimpleWallet the \"initCode\" for a wallet hold its address and a method call (deployWallet) with parameters, not actual constructor code.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}